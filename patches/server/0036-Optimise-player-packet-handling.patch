From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Mon, 11 May 2020 08:38:31 -0700
Subject: [PATCH] Optimise player packet handling

- Reduce the number of getCubes calls

This patch also fixes position desyncs by moving the code to use
one set of variables, so we shouldn't be seeing any more large
mov vecs.

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 4f76007110635e043a1535f0df443d608ba6b23c..5206ed27c6aeed46bac48dde42cbea5a7f980e9c 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1562,6 +1562,20 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         this.world = world;
     }
 
+    // Tuinity start
+    public void setLocationAndBringRootVehicle(double x, double y, double z, float yaw, float pitch) {
+        this.setLocation(x, y, z, yaw, pitch);
+        Entity rootVehicle = this.getRootVehicle();
+        if (rootVehicle == null) {
+            return;
+        }
+
+        if (rootVehicle.getRidingPassenger() == this) {
+            rootVehicle.setLocation(x, y, z, yaw, pitch);
+        }
+    }
+    // Tuinity end
+
     public void setLocation(double d0, double d1, double d2, float f, float f1) {
         double d3 = MathHelper.a(d0, -3.0E7D, 3.0E7D);
         double d4 = MathHelper.a(d2, -3.0E7D, 3.0E7D);
@@ -3618,6 +3632,14 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.f((2.0D * this.random.nextDouble() - 1.0D) * d0);
     }
 
+    // Tuinity start
+    public final AxisAlignedBB getBoundingBoxAt(double x, double y, double z) {
+        double widthHalf = (double)this.size.width / 2.0;
+        double height = (double)this.size.height;
+        return new AxisAlignedBB(x - widthHalf, y, z - widthHalf, x + widthHalf, y + height, z + widthHalf);
+    }
+    // Tuinity end
+
     public void setPositionRaw(double d0, double d1, double d2) {
         // Paper start - never allow AABB to become desynced from position
         // hanging has its own special logic
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index d421e03c809a90a2d6f082d20ff7e5ce504bff92..0ee17e602946d30275082c0730e143c68f122b38 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -1080,7 +1080,29 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             Entity entity2 = this.getVehicle();
 
             if (entity2 != entity1 && this.playerConnection != null) {
-                this.playerConnection.a(this.locX(), this.locY(), this.locZ(), this.yaw, this.pitch);
+                // Tuinity start
+                // force update tracker to prevent client desync
+                // the player would attempt to move into the ground without this
+                // but with our more strict collision checking we would stop the movement and print a message to console
+                // with this change the client does not attempt the move, and it helps make the dismount look smoother...
+                PlayerChunkMap.EntityTracker tracker = entity1 == null ? null : ((WorldServer)this.world).getChunkProvider().playerChunkMap.trackedEntities.get(entity1.getId());
+                PlayerChunkMap.EntityTracker tracker1 = entity2 == null ? null : ((WorldServer)this.world).getChunkProvider().playerChunkMap.trackedEntities.get(entity2.getId());
+                if (tracker != null) {
+                    tracker.trackerEntry.tick();
+                }
+                if (tracker1 != null) {
+                    tracker1.trackerEntry.tick();
+                }
+                // Tuinity end
+                // Tuinity start - properly teleport player to new location
+                // Fixes an issue with our implementation of teleport that also brings along the entity.
+                // So we need to teleport the player to the correct location.
+                if (entity2 != null) {
+                    this.playerConnection.teleport(entity2.locX(), entity2.locY(), entity2.locZ(), this.yaw, this.pitch);
+                } else {
+                    this.playerConnection.teleport(this.locX(), this.locY(), this.locZ(), this.yaw, this.pitch);
+                }
+                // Tuinity end - properly teleport player to new location
             }
 
             return true;
@@ -1097,6 +1119,20 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         Entity entity1 = this.getVehicle();
 
         if (entity1 != entity && this.playerConnection != null) {
+            // Tuinity start
+            // force update tracker to prevent client desync
+            // the player would attempt to move into the ground without this
+            // but with our more strict collision checking we would stop the movement and print a message to console
+            // with this change the client does not attempt the move, and it helps make the dismount look smoother...
+            PlayerChunkMap.EntityTracker tracker = entity == null ? null : ((WorldServer)this.world).getChunkProvider().playerChunkMap.trackedEntities.get(entity.getId());
+            PlayerChunkMap.EntityTracker tracker1 = entity1 == null ? null : ((WorldServer)this.world).getChunkProvider().playerChunkMap.trackedEntities.get(entity1.getId());
+            if (tracker != null) {
+                tracker.trackerEntry.tick();
+            }
+            if (tracker1 != null) {
+                tracker1.trackerEntry.tick();
+            }
+            // Tuinity end
             this.playerConnection.a(this.locX(), this.locY(), this.locZ(), this.yaw, this.pitch);
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index fa324898f8816f1f4eba22682d069756e3036d98..c4127793c91349ce7ace75290e25da3333d92bbf 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -82,19 +82,9 @@ public class PlayerConnection implements PacketListenerPlayIn {
     // CraftBukkit end
     private int j;
     private final Int2ShortMap k = new Int2ShortOpenHashMap();
-    private double l;
-    private double m;
-    private double n;
-    private double o;
-    private double p;
-    private double q;
+    // Tuinity - replace with just one last pos set
     private Entity r;
-    private double s;
-    private double t;
-    private double u;
-    private double v;
-    private double w;
-    private double x;
+    // Tuinity - replace with just one last pos set
     private Vec3D teleportPos;
     private int teleportAwait;
     private int A;
@@ -137,6 +127,43 @@ public class PlayerConnection implements PacketListenerPlayIn {
     private boolean justTeleported = false;
     private boolean hasMoved; // Spigot
 
+    // Tuinity start - replace last position tracking with just one pos set
+    // this is used to enforce our variable state we have set here
+    // if this isn't set in a move call (entity/player), then we force teleport the player/entity to where
+    // they currently are.
+    // After the player sends the teleport accept packet, only then this variable is updated to prevent
+    // some sort of desync (the corresponding lastClient and lastClientFromLastTick fields are also updated)
+    // This should ensure the variable set below is always valid.
+    boolean hasLastClientBeenSet = false;
+
+    double lastClientX;
+    double lastClientY;
+    double lastClientZ;
+
+    // we use these variables to control speed effectively, as this defends against clients simply splitting up
+    // their move packets (as lastClientX is updated after each move packet)
+    double lastClientXFromLastTick;
+    double lastClientYFromLastTick;
+    double lastClientZFromLastTick;
+
+    void setLastTickedClientPos(double x, double y, double z) {
+        this.lastClientXFromLastTick = x;
+        this.lastClientYFromLastTick = y;
+        this.lastClientZFromLastTick = z;
+    }
+
+    void setLastClientPos(double x, double y, double z) {
+        this.lastClientX = x;
+        this.lastClientY = y;
+        this.lastClientZ = z;
+    }
+
+    static boolean isCollidingAt(Entity enitty, double x, double y, double z) {
+        WorldServer world = ((WorldServer)enitty.world);
+        return world.hasAnyCollisions(enitty, enitty.getBoundingBoxAt(x, y, z));
+    }
+    // Tuinity end - replace last position tracking with just one pos set
+
     public CraftPlayer getPlayer() {
         return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
     }
@@ -157,7 +184,14 @@ public class PlayerConnection implements PacketListenerPlayIn {
         this.player.lastY = this.player.locY();
         this.player.lastZ = this.player.locZ();
         this.player.playerTick();
-        this.player.setLocation(this.l, this.m, this.n, this.player.yaw, this.player.pitch);
+        // Tuinity start
+        if (this.hasLastClientBeenSet) {
+            this.setLastTickedClientPos(this.lastClientX, this.lastClientY, this.lastClientZ);
+            this.player.setLocationAndBringRootVehicle(this.lastClientX, this.lastClientY, this.lastClientZ, this.player.yaw, this.player.pitch);
+        } else {
+            this.player.setLocationAndBringRootVehicle(this.player.locX(), this.player.locY(), this.player.locZ(), this.player.yaw, this.player.pitch);
+        }
+        // Tuinity end
         ++this.e;
         this.processedMovePackets = this.receivedMovePackets;
         if (this.B && !this.player.isSleeping()) { // Paper - #3176 Allow sleeping players to float
@@ -173,12 +207,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         this.r = this.player.getRootVehicle();
         if (this.r != this.player && this.r.getRidingPassenger() == this.player) {
-            this.s = this.r.locX();
-            this.t = this.r.locY();
-            this.u = this.r.locZ();
-            this.v = this.r.locX();
-            this.w = this.r.locY();
-            this.x = this.r.locZ();
+            // Tuinity - replace with just one last pos
             if (this.D && this.player.getRootVehicle().getRidingPassenger() == this.player) {
                 if (++this.E > 80) {
                     PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getDisplayName().getString());
@@ -240,12 +269,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
     }
 
     public void syncPosition() {
-        this.l = this.player.locX();
-        this.m = this.player.locY();
-        this.n = this.player.locZ();
-        this.o = this.player.locX();
-        this.p = this.player.locY();
-        this.q = this.player.locZ();
+        // Tuinity - replaced with just one var set
     }
 
     @Override
@@ -323,20 +347,30 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
             if (entity != this.player && entity.getRidingPassenger() == this.player && entity == this.r) {
                 WorldServer worldserver = this.player.getWorldServer();
-                double d0 = entity.locX();
-                double d1 = entity.locY();
-                double d2 = entity.locZ();
-                double d3 = packetplayinvehiclemove.getX();
-                double d4 = packetplayinvehiclemove.getY();
-                double d5 = packetplayinvehiclemove.getZ();
+                double d0 = entity.locX(); double fromX = d0; // Tuinity - OBFHELPER
+                double d1 = entity.locY(); double fromY = d1; // Tuinity - OBFHELPER
+                double d2 = entity.locZ(); double fromZ = d2; // Tuinity - OBFHELPER
+                double d3 = packetplayinvehiclemove.getX(); double toX = d3; // Tuinity - OBFHELPER
+                double d4 = packetplayinvehiclemove.getY(); double toY = d4; // Tuinity - OBFHELPER
+                double d5 = packetplayinvehiclemove.getZ(); double toZ = d5; // Tuinity - OBFHELPER
                 float f = packetplayinvehiclemove.getYaw();
                 float f1 = packetplayinvehiclemove.getPitch();
-                double d6 = d3 - this.s;
-                double d7 = d4 - this.t;
-                double d8 = d5 - this.u;
+                // Tuinity start - replace with just one var set
+                double d6 = d3 - this.lastClientXFromLastTick;
+                double d7 = d4 - this.lastClientYFromLastTick;
+                double d8 = d5 - this.lastClientZFromLastTick;
+                // Tuinity end - replace with just one var set
                 double d9 = entity.getMot().g();
                 double d10 = d6 * d6 + d7 * d7 + d8 * d8;
-
+                // Tuinity start - replace with just one var set
+                if (this.teleportPos != null) {
+                    return;
+                }
+                if (!this.hasLastClientBeenSet) {
+                    this.teleport(fromX, fromY, fromZ, this.player.yaw, this.player.pitch);
+                    return;
+                }
+                // Tuinity end - replace with just one var set
 
                 // CraftBukkit start - handle custom speeds and skipped ticks
                 this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
@@ -364,8 +398,10 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 speed *= 2f; // TODO: Get the speed of the vehicle instead of the player
 
                 // Paper start - Prevent moving into unloaded chunks
-                if (player.world.paperConfig.preventMovingIntoUnloadedChunks && worldserver.getChunkIfLoadedImmediately((int) Math.floor(packetplayinvehiclemove.getX()) >> 4, (int) Math.floor(packetplayinvehiclemove.getZ()) >> 4) == null) {
-                    this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
+                if (player.world.paperConfig.preventMovingIntoUnloadedChunks // Tuinity - improve this check
+                        && (!worldserver.areChunksLoadedForMove(this.player.getBoundingBoxAt(this.lastClientX, this.lastClientY, this.lastClientZ).expand(toX - this.lastClientX, toY - this.lastClientY, toZ - this.lastClientZ)) // Tuinity - improve this check
+                        || !worldserver.areChunksLoadedForMove(entity.getBoundingBoxAt(this.lastClientX, this.lastClientY, this.lastClientZ).expand(toX - this.lastClientX, toY - this.lastClientY, toZ - this.lastClientZ)))) { // Tuinity - improve this check
+                    this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity)); this.teleport(fromX, fromY, fromZ, this.player.yaw, this.player.pitch); // Tuinity
                     return;
                 }
                 // Paper end
@@ -373,15 +409,29 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isExemptPlayer()) {
                 // CraftBukkit end
                     PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getDisplayName().getString(), this.player.getDisplayName().getString(), d6, d7, d8);
-                    this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
+                    this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity)); this.teleport(fromX, fromY, fromZ, this.player.yaw, this.player.pitch); // Tuinity
                     return;
                 }
 
-                boolean flag = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D));
-
-                d6 = d3 - this.v;
-                d7 = d4 - this.w - 1.0E-6D;
-                d8 = d5 - this.x;
+                // Tuinity - not needed anymore
+
+                // Tuinity start - replace with just one var set
+                d6 = d3 - this.lastClientX;
+                d7 = d4 - this.lastClientY - 1.0E-6D;
+                d8 = d5 - this.lastClientZ;
+                // Tuinity end - replace with just one var set
+                // Tuinity start - optimise player move packet handling
+                double clientDiffX = toX - this.lastClientX;
+                double clientDiffY = toY - this.lastClientY;
+                double clientDiffZ = toZ - this.lastClientZ;
+
+                entity.setPosition(this.lastClientX, this.lastClientY, this.lastClientZ);
+                Vec3D clientMove = new Vec3D(clientDiffX, clientDiffY, clientDiffZ);
+                Vec3D collision = entity.performCollision(clientMove, 0.0625);
+                boolean collided = !clientMove.equals(collision);
+
+                entity.setPosition(fromX, fromY, fromZ);
+                // Tuinity end - optimise player move packet handling
                 entity.move(EnumMoveType.PLAYER, new Vec3D(d6, d7, d8));
                 double d11 = d7;
 
@@ -393,22 +443,19 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                 d8 = d5 - entity.locZ();
                 d10 = d6 * d6 + d7 * d7 + d8 * d8;
-                boolean flag1 = false;
-
-                if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold) { // Spigot
-                    flag1 = true;
-                    PlayerConnection.LOGGER.warn(entity.getName() + " (vehicle of " + this.player.getName() + ") moved wrongly!"); // Paper - More informative
-                }
+                // Tuinity - no longer needed
                 Location curPos = this.getPlayer().getLocation(); // Spigot
 
-                entity.setLocation(d3, d4, d5, f, f1);
-                player.setLocation(d3, d4, d5, this.player.yaw, this.player.pitch); // CraftBukkit
-                boolean flag2 = worldserver.getCubes(entity, entity.getBoundingBox().shrink(0.0625D));
+                this.player.setLocationAndBringRootVehicle(d3, d4, d5, this.player.yaw, this.player.pitch); // Tuinity - force set positions
+                // Tuinity - no longer needed
 
-                if (flag && (flag1 || !flag2)) {
-                    entity.setLocation(d0, d1, d2, f, f1);
-                    player.setLocation(d0, d1, d2, this.player.yaw, this.player.pitch); // CraftBukkit
+                // Tuinity start
+                if (collided) {
+                    PlayerConnection.LOGGER.warn(entity.getName() + " (vehicle of " + this.player.getName() + ") moved wrongly! Was colliding: " + isCollidingAt(entity, this.lastClientX, this.lastClientY, this.lastClientZ) + ", is colliding: " + isCollidingAt(entity, toX, toY, toZ)); // Paper - More informative // Tuinity
+                    // Tuinity end
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
+                    this.player.setLocationAndBringRootVehicle(d0, d1, d2, this.player.yaw, this.player.pitch); // Tuinity - force update lastClient pos
+                    this.teleport(d0, d1, d2, this.player.yaw, this.player.pitch); // Tuinity - force update lastClient pos
                     return;
                 }
 
@@ -482,9 +529,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 this.player.getWorldServer().getChunkProvider().movePlayer(this.player);
                 this.player.checkMovement(this.player.locX() - d0, this.player.locY() - d1, this.player.locZ() - d2);
                 this.D = d11 >= -0.03125D && !this.minecraftServer.getAllowFlight() && !worldserver.b(entity.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D));
-                this.v = entity.locX();
-                this.w = entity.locY();
-                this.x = entity.locZ();
+                this.setLastClientPos(toX, toY, toZ); // Tuinity
             }
 
         }
@@ -494,15 +539,15 @@ public class PlayerConnection implements PacketListenerPlayIn {
     public void a(PacketPlayInTeleportAccept packetplayinteleportaccept) {
         PlayerConnectionUtils.ensureMainThread(packetplayinteleportaccept, this, this.player.getWorldServer());
         if (packetplayinteleportaccept.b() == this.teleportAwait && this.teleportPos != null) { // CraftBukkit
-            this.player.setLocation(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
-            this.o = this.teleportPos.x;
-            this.p = this.teleportPos.y;
-            this.q = this.teleportPos.z;
+            this.player.setLocationAndBringRootVehicle(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch); // Tuinity
             this.syncPosition(); // Paper
             if (this.player.H()) {
                 this.player.I();
             }
 
+            this.setLastClientPos(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z); // Tuinity
+            this.setLastTickedClientPos(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z); // Tuinity
+            this.hasLastClientBeenSet = true; // Tuinity
             this.teleportPos = null;
             this.player.getWorldServer().getChunkProvider().movePlayer(this.player); // CraftBukkit
         }
@@ -950,12 +995,18 @@ public class PlayerConnection implements PacketListenerPlayIn {
                 }
 
                 if (this.teleportPos != null) {
-                    if (this.e - this.A > 20) {
+                    if (false && this.e - this.A > 20) { // Tuinity - this will greatly screw with clients with > 1000ms
                         this.A = this.e;
                         this.a(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
                     }
                     this.allowedPlayerTicks = 20; // CraftBukkit
                 } else {
+                    // Tuinity start - enforce that las client pos is set
+                    if (!this.hasLastClientBeenSet) {
+                        this.teleport(this.player.locX(), this.player.locY(), this.player.locZ(), this.player.yaw, this.player.pitch);
+                        return;
+                    }
+                    // Tuinity end - enforce that las client pos is set
                     this.A = this.e;
                     if (this.player.isPassenger()) {
                         this.player.setLocation(this.player.locX(), this.player.locY(), this.player.locZ(), packetplayinflying.a(this.player.yaw), packetplayinflying.b(this.player.pitch));
@@ -974,13 +1025,15 @@ public class PlayerConnection implements PacketListenerPlayIn {
                         double d2 = this.player.locZ();
                         double d3 = this.player.locY();
                         double d4 = packetplayinflying.a(this.player.locX());double toX = d4; // Paper - OBFHELPER
-                        double d5 = packetplayinflying.b(this.player.locY());
+                        double d5 = packetplayinflying.b(this.player.locY());double toY = d5; // Tuinity - OBFHELPER
                         double d6 = packetplayinflying.c(this.player.locZ());double toZ = d6; // Paper - OBFHELPER
                         float f = packetplayinflying.a(this.player.yaw);
                         float f1 = packetplayinflying.b(this.player.pitch);
-                        double d7 = d4 - this.l;
-                        double d8 = d5 - this.m;
-                        double d9 = d6 - this.n;
+                        // Tuinity start - use only one set of variables
+                        double d7 = d4 - this.lastClientXFromLastTick;
+                        double d8 = d5 - this.lastClientYFromLastTick;
+                        double d9 = d6 - this.lastClientZFromLastTick;
+                        // Tuinity end - use only one set of variables
                         double d10 = this.player.getMot().g();
                         double d11 = d7 * d7 + d8 * d8 + d9 * d9;
 
@@ -1015,7 +1068,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                 speed = player.abilities.walkSpeed * 10f;
                             }
                             // Paper start - Prevent moving into unloaded chunks
-                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && (this.player.locX() != toX || this.player.locZ() != toZ) && worldserver.getChunkIfLoadedImmediately((int) Math.floor(toX) >> 4, (int) Math.floor(toZ) >> 4) == null) { // Paper - use getIfLoadedImmediately
+                            if (player.world.paperConfig.preventMovingIntoUnloadedChunks && !worldserver.areChunksLoadedForMove(this.player.getBoundingBoxAt(this.lastClientX, this.lastClientY, this.lastClientZ).expand(toX - this.lastClientX, toY - this.lastClientY, toZ - this.lastClientZ))) { // Paper - use getIfLoadedImmediately // Tuinity - improve this check
                                 this.internalTeleport(this.player.locX(), this.player.locY(), this.player.locZ(), this.player.yaw, this.player.pitch, Collections.emptySet());
                                 return;
                             }
@@ -1032,11 +1085,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                 }
                             }
 
-                            boolean flag = this.a((IWorldReader) worldserver);
+                            // Tuinity - no longer needed
 
-                            d7 = d4 - this.o;
-                            d8 = d5 - this.p;
-                            d9 = d6 - this.q;
+                            // Tuinity start - use only one set of variables
+                            d7 = d4 - this.lastClientX;
+                            d8 = d5 - this.lastClientY;
+                            d9 = d6 - this.lastClientZ;
+                            // Tuinity end - use only one set of variables
                             if (d8 > 0.0D) {
                                 this.player.fallDistance = 0.0F;
                             }
@@ -1072,7 +1127,18 @@ public class PlayerConnection implements PacketListenerPlayIn {
                                 // Paper end
                             }
 
-                            this.player.move(EnumMoveType.PLAYER, new Vec3D(d7, d8, d9));
+                            // Tuinity start - optimise player move packet handling
+                            double clientDiffX = toX - this.lastClientX;
+                            double clientDiffY = toY - this.lastClientY;
+                            double clientDiffZ = toZ - this.lastClientZ;
+
+                            this.player.setPosition(this.lastClientX, this.lastClientY, this.lastClientZ);
+                            this.player.requiredRelaxedCollisionCheck = true;
+                            this.player.move(EnumMoveType.PLAYER, new Vec3D(clientDiffX, clientDiffY, clientDiffZ));
+                            this.player.requiredRelaxedCollisionCheck = false;
+                            boolean collided = this.player.collidedOnSomething;
+                            // Tuinity end - optimise player move packet handling
+
                             this.player.onGround = packetplayinflying.b();
                             double d12 = d8;
 
@@ -1084,23 +1150,16 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
                             d9 = d6 - this.player.locZ();
                             d11 = d7 * d7 + d8 * d8 + d9 * d9;
-                            boolean flag1 = false;
-
-                            if (!this.player.H() && d11 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative() && this.player.playerInteractManager.getGameMode() != EnumGamemode.SPECTATOR) { // Spigot
-                                flag1 = true;
-                                PlayerConnection.LOGGER.warn("{} moved wrongly!", this.player.getDisplayName().getString());
-                            }
-
+                            // Tuinity - no longer needed
                             this.player.setLocation(d4, d5, d6, f, f1);
                             this.player.checkMovement(this.player.locX() - d0, this.player.locY() - d1, this.player.locZ() - d2);
-                            if (!this.player.noclip && !this.player.isSleeping()) {
-                                boolean flag2 = this.a((IWorldReader) worldserver);
-
-                                if (flag && (flag1 || !flag2)) {
-                                    this.a(d0, d1, d2, f, f1);
-                                    return;
-                                }
+                            // Tuinity start - no longer needed
+                            if (collided && !this.player.noclip && !this.player.isSpectator()) {
+                                PlayerConnection.LOGGER.warn("{} moved wrongly! Was colliding: " + isCollidingAt(this.player, this.lastClientX, this.lastClientY, this.lastClientZ) + ", is colliding: " + isCollidingAt(this.player, toX, toY, toZ), this.player.getDisplayName().getString());
+                                this.teleport(d0, d1, d2, f, f1);
+                                return;
                             }
+                            // Tuinity end - no longer needed
 
                             // CraftBukkit start - fire PlayerMoveEvent
                             // Rest to old location first
@@ -1170,9 +1229,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
                             this.player.onGround = packetplayinflying.b();
                             this.player.getWorldServer().getChunkProvider().movePlayer(this.player);
                             this.player.a(this.player.locY() - d3, packetplayinflying.b());
-                            this.o = this.player.locX();
-                            this.p = this.player.locY();
-                            this.q = this.player.locZ();
+                            this.setLastClientPos(toX, toY, toZ); // Tuinity
                         }
                     }
                 }
@@ -1184,6 +1241,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
         return iworldreader.getCubes(this.player, this.player.getBoundingBox().shrink(9.999999747378752E-6D));
     }
 
+    public final void teleport(double d0, double d1, double d2, float f, float f1) { this.a(d0, d1, d2, f, f1); } // Tuinity - OBFHELPER
     public void a(double d0, double d1, double d2, float f, float f1) {
         this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
     }
@@ -1240,6 +1298,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
             LOGGER.info("Attempt to teleport dead player {} restricted", player.getName());
             return;
         }
+        this.hasLastClientBeenSet = false; // Tuinity - will get set to true on teleport accept
         // CraftBukkit start
         if (Float.isNaN(f)) {
             f = 0;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index d1533a8265b4704f5d8abe28cfa94e71d921af39..c05dc9e17e7790a3b2e632d47a0e72cbcb63f214 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -696,7 +696,7 @@ public abstract class PlayerList {
         entityplayer.viewingCredits = false;
         // CraftBukkit end
 
-        entityplayer1.playerConnection = entityplayer.playerConnection;
+        entityplayer1.playerConnection = entityplayer.playerConnection; entityplayer1.playerConnection.hasLastClientBeenSet = false; // Tuinity - ensure the client pos is correctly set on world change
         entityplayer1.copyFrom(entityplayer, flag);
         entityplayer1.e(entityplayer.getId());
         entityplayer1.a(entityplayer.getMainHand());
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 75af99c2eb800504e1a7dda39dd47916e0492028..4db6ae2133cc52d5c0a10c9dfd93b192f2f58bdf 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -584,6 +584,37 @@ public class WorldServer extends World {
     }
     // Tuinity end - optimise collision
 
+    // Tuinity start
+    public boolean areChunksLoadedForMove(AxisAlignedBB axisalignedbb) {
+        // copied code from collision methods, so that we can guarantee that they wont load chunks (we don't override
+        // ICollisionAccess methods for VoxelShapes)
+        // be more strict too, add a block (dumb plugins in move events?)
+        int minBlockX = MathHelper.floor(axisalignedbb.minX - 1.0E-7D) - 3;
+        int maxBlockX = MathHelper.floor(axisalignedbb.maxX + 1.0E-7D) + 3;
+
+        int minBlockZ = MathHelper.floor(axisalignedbb.minZ - 1.0E-7D) - 3;
+        int maxBlockZ = MathHelper.floor(axisalignedbb.maxZ + 1.0E-7D) + 3;
+
+        int minChunkX = minBlockX >> 4;
+        int maxChunkX = maxBlockX >> 4;
+
+        int minChunkZ = minBlockZ >> 4;
+        int maxChunkZ = maxBlockZ >> 4;
+
+        ChunkProviderServer chunkProvider = this.getChunkProvider();
+
+        for (int cx = minChunkX; cx <= maxChunkX; ++cx) {
+            for (int cz = minChunkZ; cz <= maxChunkZ; ++cz) {
+                if (chunkProvider.getChunkAtIfLoadedImmediately(cx, cz) == null) {
+                    return false;
+                }
+            }
+        }
+
+        return true;
+    }
+    // Tuinity end
+
     // CraftBukkit start
     @Override
     protected TileEntity getTileEntity(BlockPosition pos, boolean validate) {
